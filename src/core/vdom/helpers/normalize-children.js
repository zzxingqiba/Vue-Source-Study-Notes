
import { isFalse, isTrue, isDef, isUndef, isPrimitive} from '../../../shared/util'
import { createTextVNode } from '../../../core/vdom/vnode'

export function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  const res = []
  let i, c, lastIndex, last
  for (i = 0; i < children.length; i++) {
    c = children[i]
    // 判断children中是否undefined和null 如果是则跳出本次循环
    if (isUndef(c) || typeof c === 'boolean') continue
    lastIndex = res.length - 1
    last = res[lastIndex]
    if (Array.isArray(c)) {
    } else if (isPrimitive(c)) { // 这种情况 render:(h) => h('div', {} , ['hhh'])  会进入
      if (isTextNode(last)) { //ssr情况 先不考虑
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        res.push(createTextVNode(c))
      }
    }else{
      if (isTextNode(c) && isTextNode(last)) { //ssr情况 先不考虑
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for) 先不考虑
        // if (isTrue(children._isVList) &&
        //   isDef(c.tag) &&
        //   isUndef(c.key) &&
        //   isDef(nestedIndex)) {
        //   c.key = `__vlist${nestedIndex}_${i}__`
        // }
        res.push(c)
      }
    }
  }
  return res
}